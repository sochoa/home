#!/bin/bash

export TZ=America/Los_Angeles
export LANG=en_US.UTF-8
export LC_ALL=en_US.UTF-8

# If not running interactively, don't do anything
[ -z "$PS1" ] && return

[ -n "$DISPLAY" -a "$TERM" == "xterm" ] && export TERM=xterm-256color

export HISTCONTROL="ignoredups,ignoreboth"
export HISTTIMEFORMAT="%s "
export HISTSIZE=1000
shopt -s histappend

# check the window size after each command and, if necessary, 
# update the values of LINES and COLUMNS.
shopt -s checkwinsize

shopt -s cdspell
set completion-ignore-case on

PS1="\u @ vm \w \$ "
# source $HOME/git/home/scripts/colors.rc
source $HOME/git/home/scripts/git-prompt.sh
source $HOME/git/home/scripts/ps1.rc

alias reload="source $HOME/.bashrc"

alias sudo="sudo "
function _sudo(){
    sudo $@
}
alias s="_sudo"
export LESS=-Ri

# some more ls aliases

alias ll='ls -l'
alias la='ls -A'
alias l='ls -C'
alias v='vim'

function _vs(){
    vim sudo:"$1"
}
alias vs='_vs'
alias y='sudo yum'

alias gu='git submodule update --init --recursive'
alias sde='ssh bitcycle@sde-interview.com'
alias mcc='ssh sochoa@192.168.17.159'

[ -f /etc/bash_completion ] && . /etc/bash_completion

if [[ -d "$HOME/perl5/perlbrew/etc" ]]; then
    source ~/perl5/perlbrew/etc/bashrc
    if [[ -d "$HOME/perl/bin" ]]; then
        perlbrew switch perl-5.14.2
    fi
fi

if which ack-grep &> /dev/null ; then
    ack_path="$(which ack-grep 2>/dev/null)"
    alias ack="ack-grep"
fi 

ack_path="$(which ack 2>/dev/null)"
if [ ! -f $ack_path ]; then
    alias ack="grep -E"
fi

[ -d $HOME/opt/bin ] && [[ "$PATH" != *"$HOME/opt/bin"* ]] && export PATH="$HOME/opt/bin:$PATH"

vim=$(which vim)
alias vps1="vim $HOME/git/home/scripts/ps1.rc"
export VISUAL=$vim
export EDITOR=$vim
export PSQL_EDITOR=$vim

# tmux aliases
alias ta="tmux attach -d -t"
alias tn="cd $HOME; tmux new -s"
alias tl="tmux ls 2>/dev/null || echo 'No sessions available'"

# work-specific configurations
[ -f $HOME/.mccrc ] && source $HOME/.mccrc


[[ -d $HOME/.rvm/bin ]] && export PATH=$PATH:$HOME/.rvm/bin # Add RVM to PATH for scripting
[[ -s "$HOME/.rvm/scripts/rvm" ]] && source "$HOME/.rvm/scripts/rvm" && rvm use ruby-1.9.2-p320 &>/dev/null # Load RVM into a shell session *as a function*
# [[ -s "$HOME/.pythonbrew/etc/bashrc" ]] && source "$HOME/.pythonbrew/etc/bashrc" && pythonbrew switch 2.6.6 &>/dev/null && pythonbrew venv use mcc_master &>/dev/null

function _reset_gemset() {
    local gemset=""
    [ -z "${1}" ] && gemset="$(rvm gemset list | grep '^=' | sed 's/^\=. //g' | sed 's/\s*$//g')" || gemset="${1}"
    [[ "${gemset}" == "(default)" ]] && \
        echo 'Must specific a named gemset!' && \
        rvm gemset list && \
        return
    [[ "${gemset}" == "global" ]] && \
        echo 'Cannot delete the global gemset' && \
        rvm gemset list && \
        return
    read -p "Press [Enter] to delete and recreate ${gemset}..."
    rvm gemset delete --force ${gemset}
    rvm gemset use --create ${gemset}
    working_dir="$(pwd)"
    read -p "Press [Enter] to install the deployment tool gem(s) from the current git branch..."
    cd $MCC_SRC/itc-deployment-tool/deployment && rm pkg/*.gem -f && rake build && gem install pkg/*.gem && cd "${working_dir}"
    read -p "Press [Enter] to install the deployment tool plugin gem(s) from the current git branch..."
    cd $MCC_SRC/itc-deployment-tool/deployment-plugins && sh install_all.sh && cd "${working_dir}"
}

alias reset_gemset="_reset_gemset"
